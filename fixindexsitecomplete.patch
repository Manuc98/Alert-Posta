--- a/src/index-site.js
+++ b/src/index-site.js
@@
-    if (request.method === 'OPTIONS') {
-      return new Response(null, { headers: CORS_HEADERS });
-    }
+    if (request.method === 'OPTIONS') {
+      return new Response(null, { headers: { ...CORS_HEADERS } });
+    }
@@
-    return new Response('Not Found', { status: 404, headers: CORS_HEADERS });
+    return new Response('Not Found', { status: 404, headers: { ...CORS_HEADERS } });
@@
-                return new Response('Method not allowed', { status: 405, headers: CORS_HEADERS });
+                return new Response('Method not allowed', { status: 405, headers: { ...CORS_HEADERS } });
@@
-        if (!response.ok) {
-                    const apiError = response.headers.get('X-API-FOOTBALL-ERROR');
-                    const errorMsg = apiError ? 'API-Footba...r: ' + apiError : 'Falha ao carregar jogos: ' + response.status;
-                    throw new Error(errorMsg);
-                }
-                
-                const games = await response.json();
-                console.log(' Dados recebidos:', games);
-                console.log(' Tipo de dados:', typeof games, 'E array?', Array.isArray(games));
-                
-                // A resposta agora e diretamente um array
-                if (Array.isArray(games)) {
-                    if (games.length === 0) {
-                        console.log(' Nenhum jogo encontrado');
-                        displayLiveGames([]);
-                        showToast('Nenhum jogo encontrado ou erro na API', 'warning');
-                    } else {
-                        console.log(' Jogos encontrados:', games.length);
-                        displayLiveGames(games);
-                        showToast(games.length + ' jogos carregados com sucesso', 'success');
-                    }
-                } else {
-                    console.error(' Resposta invalida:', games);
-                    throw new Error('Resposta invalida da API');
-                }
+                if (!response.ok) {
+                    const apiError = response.headers.get('X-API-FOOTBALL-ERROR');
+                    const errorMsg = apiError ? 'API-Football error: ' + apiError : 'Falha ao carregar jogos: ' + response.status;
+                    throw new Error(errorMsg);
+                }
+
+                let payload;
+                try {
+                    payload = await response.json();
+                } catch (e) {
+                    throw new Error('Erro a interpretar JSON: ' + e.message);
+                }
+
+                // Aceitar diferentes formatos: array directo ou object com propriedade games/results/data
+                const gamesArray = Array.isArray(payload) ? payload : (payload && (payload.games || payload.results || payload.data) ? (payload.games || payload.results || payload.data) : []);
+                console.log(' Dados recebidos normalizados:', Array.isArray(gamesArray), gamesArray && gamesArray.length);
+
+                if (!Array.isArray(gamesArray) || gamesArray.length === 0) {
+                    console.log(' Nenhum jogo encontrado');
+                    displayLiveGames([]);
+                    showToast('Nenhum jogo encontrado ou erro na API', 'warning');
+                    return;
+                } else {
+                    console.log(' Jogos encontrados:', gamesArray.length);
+                    displayLiveGames(gamesArray);
+                    showToast(gamesArray.length + ' jogos carregados com sucesso', 'success');
+                }
@@
-                return new Response('Method not allowed', { status: 405, headers: CORS_HEADERS });
+                return new Response('Method not allowed', { status: 405, headers: { ...CORS_HEADERS } });
